name: Excavator

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */3 * * *"

jobs:
  excavate:
    name: Excavate
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: "Ryanjiena/Meta"
          ref: "main"
          token: ${{ secrets.GH_TOKEN }}
      - name: Excavate
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SCOOP_GH_TOKEN: ${{ secrets.GH_TOKEN }}
          USER_EMAIL: "78083448+JaimeZeng@users.noreply.github.com"
          USER: "JaimeZeng[bot]"
        run: |
          # Installing scoop
          $env:SCOOP = Join-Path $env:USERPROFILE 'SCOOP'
          $env:SCOOP_HOME = Join-Path $env:SCOOP 'apps\scoop\current'
          $env:SCOOP_GLOBAL = Join-Path $env:SystemDrive 'SCOOP'
          $env:SCOOP_DEBUG = 1
          $f = Join-Path $env:USERPROFILE 'install.ps1'
          Invoke-WebRequest 'https://raw.githubusercontent.com/ScoopInstaller/Install/master/install.ps1' -UseBasicParsing -OutFile $f
          & $f -RunAsAdmin


          # Initialize
          git config --global user.name $env:USER
          git config --global user.email $env:USER_EMAIL
          git remote 'set-url' --push origin "https://${env:GITHUB_ACTOR}:$env:GITHUB_TOKEN@github.com/Ryanjiena/Meta.git"
          scoop config '7ZIPEXTRACT_USE_EXTERNAL' $true
          scoop install 'hub' -g
          if (-not $env:HUB_VERBOSE) {
              $env:HUB_VERBOSE = '1'
              [System.Environment]::SetEnvironmentVariable('HUB_VERBOSE', $env:HUB_VERBOSE, 'Machine')
          }


          # Load all scoop's modules.
          # Dot sourcing needs to be done on highest scope possible to propagate into lower scopes
          Get-ChildItem (Join-Path $env:SCOOP_HOME 'lib') '*.ps1' | ForEach-Object { & $_.FullName }
          # run command and return output
          function execute($cmd) {
              Write-Host $cmd -ForegroundColor Green
              $output = Invoke-Expression $cmd

              if ($LASTEXITCODE -gt 0) {
                  abort "^^^ Error! See above ^^^ (last command: $cmd)"
              }

              return $output
          }
          # parse manifest
          function parse_json($path) {
              if (!(Test-Path $path)) { return $null }
              Get-Content $path -Raw -Encoding UTF8 | ConvertFrom-Json -ea stop
          }


          # Scheduled
          $BUCKET_ROOT = $env:GITHUB_WORKSPACE
          $MANIFESTS_LOCATION = Join-Path $BUCKET_ROOT 'bucket'
          $BINARIES_FOLDER = Join-Path $BUCKET_ROOT 'bin'
          $App = '*'
          $Dir = $MANIFESTS_LOCATION
          $OriginBranch = 'main'
          $SkipUpdated = $true

          execute "hub pull origin $OriginBranch"
          execute "hub checkout $OriginBranch"

          & (Join-Path $BINARIES_FOLDER 'checkver.ps1') -App $App -Dir $Dir -Update -SkipUpdated:$SkipUpdated
          if ($SpecialSnowflakes) {
              Write-Host "Forcing update on our special snowflakes: $($SpecialSnowflakes -join ',')" -ForegroundColor DarkCyan
              $SpecialSnowflakes -split ',' | ForEach-Object {
                  & (Join-Path $BINARIES_FOLDER 'checkver.ps1') $_ -Dir $Dir -ForceUpdate
              }
          }

          hub diff --name-only | ForEach-Object {
              $manifest = $_
              if (!$manifest.EndsWith('.json')) {
                  return
              }

              $app = ([System.IO.Path]::GetFileNameWithoutExtension($manifest))
              $json = parse_json $manifest
              if (!$json.version) {
                  error "Invalid manifest: $manifest ..."
                  return
              }
              $version = $json.version

              Write-Host "Creating update $app ($version) ..." -ForegroundColor DarkCyan
              execute "hub add $manifest"

              # detect if file was staged, because it's not when only LF or CRLF have changed
              $status = execute 'hub status --porcelain -uno'
              $status = $status | Where-Object { $_ -match "M\s{2}.*$app.json" }
              if ($status -and $status.StartsWith('M  ') -and $status.EndsWith("$app.json")) {
                  execute "hub commit -m '${app}: Update to version $version'"
              }
              else {
                  Write-Host "Skipping $app because only LF/CRLF changes were detected ..." -ForegroundColor Yellow
              }
          }


          # Pushing updates
          execute "hub push origin $OriginBranch"
          execute 'hub reset --hard'
