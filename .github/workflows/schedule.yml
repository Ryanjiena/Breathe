name: Excavator

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */3 * * *"
  push:
    branches: [main]
    paths:
      - ".github/workflows/*"

jobs:
  checkver:
    name: CheckVer
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Update package manager database
        run: sudo apt-get update
      - name: Install Dependence
        run: sudo apt-get install curl wget jq xxd libxml2-utils
      - name: Git config
        run: |
          git config --global user.email "43134606+Ryanjiena@users.noreply.github.com"
          git config --global user.name "Ryanjiena"
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Checkout MetaVersion
        uses: actions/checkout@v3
        with:
          repository: "Ryanjiena/MetaVersion"
          ref: "main"
          token: ${{ secrets.GH_TOKEN }}
          path: "metaversion"
          fetch-depth: 2
      - name: Check MetaVersion
        run: |
          cd ./metaversion/
          sed -i 's/\r$//' check.sh
          bash check.sh
          git commit -S -am "chore: checkver"
          git push origin main

      - name: Checkout deno-deploy
        uses: actions/checkout@v3
        with:
          repository: "Ryanjiena/deno-deploy"
          ref: "main"
          token: ${{ secrets.GH_TOKEN }}
          path: "deno-deploy"
          fetch-depth: 2
      - name: Check deno-deploy
        run: |
          cd ./deno-deploy/
          sed -i 's/\r$//' check.sh
          bash check.sh
          git commit -S -am "🐳 chore: Update"
          git push origin main

      - name: Checkout Meta
        uses: actions/checkout@v3
        with:
          repository: "Ryanjiena/Meta"
          ref: "main"
          token: ${{ secrets.GH_TOKEN }}
          path: "meta"
          fetch-depth: 2
      - name: Commit Meta
        run: |
          cd ./meta/
          fileArr=("alibaba.json" "chrome.json" "header.json" "msedge-beta.json" "msedge-canary.json" "msedge-dev.json" "msedge-stable.json" "oneindex.txt" "release.txt")
          for file in ${fileArr[@]}
          do
            cp ../metaversion/$file ./versions/$file
          done

          git commit -S -am "🐳(chore): update versions"
          git push origin main

  meta:
    name: Meta Excavator
    needs: [checkver]
    runs-on: windows-latest
    if: ${{ always() }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          repository: "Ryanjiena/Meta"
          ref: "main"
          token: ${{ secrets.GH_TOKEN }}
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY_SECRET }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Intstall Scoop
        run: |
          $env:SCOOP = Join-Path $env:USERPROFILE 'SCOOP'
          $env:SCOOP_HOME = Join-Path $env:SCOOP 'apps\scoop\current'
          $env:SCOOP_GLOBAL = Join-Path $env:SystemDrive 'SCOOP'
          $env:SCOOP_DEBUG = 1

          $f = Join-Path $env:USERPROFILE 'install.ps1'
          Invoke-WebRequest 'https://raw.githubusercontent.com/ScoopInstaller/Install/master/install.ps1' -UseBasicParsing -OutFile $f
          & $f -RunAsAdmin
      - name: Import all modules
        run: |
          $env:SCOOP = Join-Path $env:USERPROFILE 'SCOOP'
          $env:SCOOP_HOME = Join-Path $env:SCOOP 'apps\scoop\current'

          Get-ChildItem (Join-Path $env:SCOOP_HOME 'lib') '*.ps1' | ForEach-Object { . $_.FullName }
      - name: Checkver
        env:
          USER_EMAIL: 78083448+JaimeZeng@users.noreply.github.com
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          $env:SCOOP_GH_TOKEN = $env:GITHUB_TOKEN
          $env:SCOOP = Join-Path $env:USERPROFILE 'SCOOP'
          $env:SCOOP_HOME = Join-Path $env:SCOOP 'apps\scoop\current'
          $MANIFESTS_LOCATION = Join-Path $env:GITHUB_WORKSPACE 'bucket'

          New-Item -Name "temp" -ItemType "directory"
          (Get-ChildItem -Path bucket | Where-Object { $_.Name -match "\s*-(aliyun|huawei|nju|sdu|sjtug|tencent|tuna).json" }).Name | ForEach-Object { Move-Item .\bucket\$_ .\temp }
          Move-Item ./bucket/flutter-cn.json ./temp
          & "$env:SCOOP_HOME/bin/checkver.ps1" -Dir "$MANIFESTS_LOCATION" -Update -SkipUpdated
      - name: Commit
        run: |
          function parse_json($path) {
              if ($null -eq $path -or !(Test-Path $path)) { return $null }
              try {
                  Get-Content $path -Raw -Encoding UTF8 | ConvertFrom-Json -ErrorAction Stop
              } catch {
                  warn "Error parsing JSON at $path."
              }
          }

          git pull origin main
          git diff --name-only | ForEach-Object {
              $manifest = $_
              if (!$manifest.EndsWith('.json')) {
                  return
              }

              $app = ([System.IO.Path]::GetFileNameWithoutExtension($manifest))
              $json = parse_json $manifest
              if (!$json.version) {
                  Get-Error "Invalid manifest: $manifest ..."
                  return
              }
              $version = $json.version

              git add $manifest
              $status = (git status --porcelain -uno)
              $status = $status | Where-Object { $_ -match "M\s{2}.*$app.json" }
              if ($status -and $status.StartsWith('M  ') -and $status.EndsWith("$app.json")) {
                  git commit -m "${app}: Update version to ${version}"
              } else {
                  Write-Host "Skipping $app because only LF/CRLF changes were detected ..."
              }
          }
          Move-Item ./temp/*.json ./bucket/
          Remove-Item ./temp -Recurse -Force
          git push origin main

  # lydia:
  #   name: Lydia Excavator
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         repository: "Ryanjiena/Lydia"
  #         ref: "main"
  #         token: ${{ secrets.GH_TOKEN }}
  #     - name: Import GPG key
  #       uses: crazy-max/ghaction-import-gpg@v5
  #       with:
  #         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY_SECRET }}
  #         git_user_signingkey: true
  #         git_commit_gpgsign: true
  #     - name: Excavator
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #         SKIP_UPDATED: '1'
  #       run: |
  #         $env:SCOOP = Join-Path $env:USERPROFILE 'SCOOP'
  #         $env:SCOOP_HOME = Join-Path $env:SCOOP 'apps\scoop\current'
  #         $env:SCOOP_GLOBAL = Join-Path $env:SystemDrive 'SCOOP'
  #         $env:SCOOP_DEBUG = 1
  #         $REPOSITORY = 'Ryanjiena/Lydia'
  #         $BUCKET_ROOT = $env:GITHUB_WORKSPACE
  #         $BINARIES_FOLDER = Join-Path $env:SCOOP_HOME 'bin'
  #         $MANIFESTS_LOCATION = Join-Path $BUCKET_ROOT 'bucket'
  #         $_BRANCH = 'main'
  #         $email = '78083448+JaimeZeng@users.noreply.github.com'
  #         $user = 'JaimeZeng[bot]'
  #         $rem = "https://${env:GITHUB_ACTOR}:$env:GITHUB_TOKEN@github.com/Ryanjiena/Lydia.git"
  #         Write-Host "Config git"
  #         git config --global user.name $user
  #         git config --global user.email $email
  #         git remote 'set-url' --push origin $rem
  #         Write-Host 'Installing scoop'
  #         $f = Join-Path $env:USERPROFILE 'install.ps1'
  #         Invoke-WebRequest 'https://raw.githubusercontent.com/ScoopInstaller/Install/master/install.ps1' -UseBasicParsing -OutFile $f
  #         & $f -RunAsAdmin
  #         Write-Host 'Importing all modules'
  #         # Load all scoop's modules.
  #         # Dot sourcing needs to be done on highest scope possible to propagate into lower scopes
  #         Get-ChildItem (Join-Path $env:SCOOP_HOME 'lib') '*.ps1' | ForEach-Object { . $_.FullName }
  #         $params = @{
  #             'Dir'          = $MANIFESTS_LOCATION
  #             'Upstream'     = "${REPOSITORY}:${_BRANCH}"
  #             'OriginBranch' = $_BRANCH
  #             'Push'         = $true
  #             'SkipUpdated'  = ($env:SKIP_UPDATED -eq '1')
  #         }
  #         $env:SCOOP_GH_TOKEN = $env:GITHUB_TOKEN
  #         # Set-PSDebug -Trace 2
  #         Write-Host ''
  #         Write-Host ''
  #         & (Join-Path $BINARIES_FOLDER 'auto-pr.ps1') @params
  #         Write-Host 'Scheduled finished'

  git-sync:
    name: Sync
    needs: [meta]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Import ssh private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Build
        env:
          github_token: ${{ secrets.GH_TOKEN }}
        run: |
          #!/usr/bin/env bash
          PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
          export PATH
          # set -euxo pipefail

          DATE="$(echo $(TZ=UTC date '+%Y-%m-%d %H:%M:%S'))"
          USER=$(whoami)
          TMP_DIR="${TMP_DIR:-$(mktemp -d /tmp/breathe.XXXX)}"
          LOG_FILE="${LOG_FILE:-${TMP_DIR}/build.log}"

          git config --global user.email "43134606+Ryanjiena@users.noreply.github.com"
          git config --global user.name "Ryanjiena"
          git clone -q --depth=1 --branch="main" "https://Ryanjiena:${github_token}@github.com/Ryanjiena/Meta.git" "${TMP_DIR}/meta"
          git clone -q --depth=1 --branch="main" "https://Ryanjiena:${github_token}@github.com/Ryanjiena/Lydia.git" "${TMP_DIR}/lydia"

          git config --global user.name "Ryanjie"
          git config --global user.email "4646-Ryanjie@users.noreply.test50k.gitlab.cn"
          git config --global core.sshCommand "/usr/bin/ssh -i ~/.ssh/id_rsa"
          # https://stackoverflow.com/questions/13363553/git-error-host-key-verification-failed-when-connecting-to-remote-repository/13364116#13364116
          # ssh-keygen -R jihulab.com
          ssh-keyscan -t rsa jihulab.com >> ~/.ssh/known_hosts
          git clone -q --depth=1 git@jihulab.com:Ryanjie/Meta.git "${TMP_DIR}/meta-cn"
          git clone -q --depth=1 git@jihulab.com:Ryanjie/Lydia.git "${TMP_DIR}/lydia-cn"

          bucket_arr=("meta" "lydia")
          for bucket in "${bucket_arr[@]}"; do
              cd "${TMP_DIR}/${bucket}-cn/"
              if [ -d "bucket" ]; then
                  rm -rf bin bucket scripts
              fi
              mkdir bin bucket scripts

              cp ${TMP_DIR}/${bucket}/bin/* ${TMP_DIR}/${bucket}-cn/bin/ -f
              cp ${TMP_DIR}/${bucket}/bucket/* ${TMP_DIR}/${bucket}-cn/bucket/ -f
              cp ${TMP_DIR}/${bucket}/scripts/* ${TMP_DIR}/${bucket}-cn/scripts/ -r -f
              cp ${TMP_DIR}/${bucket}/README.md ${TMP_DIR}/${bucket}-cn/README.md -f

              cd ${TMP_DIR}/${bucket}-cn/
              if [ "$(git status -sb)" == "## main...origin/main" ];then
                echo -e "\033[42;30m nothing to commit, working tree clean~ \033[0m"
              else
                git status -s && git pull origin main && git add . && git commit -m "Sync by: ${USER}, at: ${DATE}" && git push origin main
              fi
          done

      - name: Remove ssh private key
        run: rm -f ~/.ssh/id_rsa
